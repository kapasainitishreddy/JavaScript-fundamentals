Exceptions
An important tool in many programming languages is the ability to throw and catch exceptions.

An exception is an unexpected error in some function. The function may not know how to handle the exception so it is thrown. Throwing the error stops execution in the current function and goes back to the function that called it. The calling function can choose to catch the exception and handle it there. If it doesn't catch it, the exception will continue to be thrown up the call stack until it reaches the top-level of the program.

 Let's consider an example where we want to send an email to many users:

Send Emails


This diagram starts at the top-left corner in main. Here, the program calls emailUsers which will attempt to sendEmail for each user. If the email fails to send, we'll throw an error. We'll catch this error in emailUsers where it will be logged. 

 Notice how we don't stop emailing other users when an error occurs for one! The error is thrown and handled in emailUsers, where it is logged. Then emailUsers proceeeds to call sendEmail for the next two users successfully.

In other scenarios, we may want to exit completely if an exception occurs. Perhaps the exception indicates something very bad has happened that the program cannot recover from. Throwing an exception from a lower function like sendEmail allows us to catch it on a higher-level and handle it there.

 An exception that cannot be recovered from is often referred to as a fatal exception


Throw an Error
There are cases in JavaScript where the language itself will throw an error. This is referred to as a run-time error.

We will dive into those scenarios on a future stage. First, let's create our own errors!

const error1 = new Error("Something bad happened!");
const error2 = Error("Something bad happened!");
 The two statements are functionally equivalent. They both return an Error object with the error message being "Something bad happened!". The message is a good place to write some details about why the error occurred that will help someone debug the issue.

 Typically you will see Error created with the new operator. In JavaScript, new is commonly used when creating a new instance of an object. We'll talk about this more in JavaScript Prototypes.

Throwing Errors
The idea of throwing and error is mentioned above. When we throw an error, we stop running the code at that point:

const a = 3;

if(a === 3) {
    throw new Error("we dont want a to be 3");
}

// <-- we never reach this line
 We should throw errors in places where we would want execution of the code to stop. We'll continue the code execution from wherever the error is caught. We'll discuss this in stage 2.
 Catching Errors
 Imagine you want to read from a file on your computer:

const text = readFile("book");
What would you expect readFile to do if it could not read "book"?

Perhaps it could return an empty string... but how would you know if the book is actually empty? 

An empty string might indicate an empty book or an error reading the book. This is no good, it's ambiguous! 

Instead, when readFile fails it, could throw an error. We could handle this error by try-catching it.

try {
    readFile("book"); 
}
catch(ex) {
    console.log(ex); // EISDIR: illegal operation
}
The code above will try a statement. If any errors are thrown, the logic will flow into the catch block. The line console.log(ex); will only execute if an error (ex) is thrown by readFile.

 The EISDIR is thrown in Node.JS when the target is a directory when we were expecting it to be a file. So this is a very realistic example!



q)The argument fn is a function that will throw an error when invoked. Catch the error that is thrown when invoking fn.

The tests will pass as long as the function is called and the exception is caught.

ans)function catchError(fn) {
    try {
        fn();
    }
    catch(ex) {
        
    }
}

module.exports = catchError;
