//Interpolation 
A string is stored in the variable fakeName.

Take this fake name and use it to replace every occurrence of "John" in the message.

Do not change the message in other way.

//code
const fakeName = require('./fakeName');

const message = `
    Hello, ${fakeName}! You left a package at the office today.
    You can pick up tomorrow at 10am, ${fakeName}. 
    If not I will drop it off this weekend.
    Goodbye ${fakeName}!
`;

module.exports = message;



//TOP DOUBLE
Top Double
 OK, this one will be a bit of a tough challenge!

The goal is to double a value until just before it reaches a top.

Let's say our value is 2 and our top is 100. We would double it like so:

2, 4, 8, 16, 32, 64, 128

 We start at 2, double to 4, 8, so on until 128. We recognize 128 is larger than our
  top 100 so we return 64. This is the top double for 2 before 100.

The expected result for topDouble(2, 100) would be 64.



// determine the largest double of value 
// that is less than the top 
function topDouble(value, top) {
    while(value < top) {
        value *= 2;
    }
    return value / 2;
}

module.exports = topDouble;





//all x's

function isAllX(string) {
    for(let i = 0; i < string.length; i++) {
        if (string[i].toLowerCase() !== "x") {
            return false;
        }
    }
    return true;
}

module.exports = isAllX;



//Index Of
We learned how to look up a character by index. Now it's time to find the index of a specific 

string!

There is a method on strings called indexOf that will help us find the first index of a string. 
Let's see this in action:

"Hello".indexOf("e"); // 1
"abca".indexOf("a"); // 0 
"abc".indexOf("q"); // -1 
"happy dog bark".indexOf("dog"); // 6
We can look up the index of single-characters as well as full strings!

If the index is not found, indexOf will return a -1.

 Although not as often used, it is interesting to note that there is also a lastIndexOf 
 function on strings. This works as expected,
  it finds the last occurrence of the string and returns its index.



 Slicing Strings
Let's learn about another string method: slice! 

Slice allows us to pass two parameters: a start index and an end index.

The resulting string will be a sliced string between those two indexes, not 
including the character located at the end index. Let's see some examples:

"An apple".slice(0,2); // An
"The 40 Thieves".slice(4,8); // 40 T
If the last index is not provided, slice will continue until the end of the string:

"Please Slice Me".slice(7); // Slice Me 


 Find the Longer Half
Let's find the longer half of the string before and after the x!

First, you'll need to find the lower-case x.
Once you've found the x, split the string in half. 
The first half will be the string before the x, the second half will be the string after the x.
Take the longer string and return it!

Examples:

splitAtX("Happyxdays"); // "Happy"
splitAtX("10xDeveloper"); // "Developer"
 For the string "Happyxdays", we would look at the two strings before and after the x:
  "Happy" and "days". "Happy" is longer, so we would return it.


 // split the string at the first occurrence of x
// return the larger of the two resulting strings
// i.e. HappyxDeveloper => Developer
function splitAtX(string) {
    const index = string.indexOf('x');
    const a = string.slice(0,index);
    const b = string.slice(index+1);
    return (a.length > b.length) ? a : b;
}//This is a ternary operator in JavaScript. It is a shorthand for an if-else statement. 
It checks if the length of variable 'a' is greater than the length of variable 'b'. 
If it is, it returns 'a', otherwise it returns 'b'. It is a one-liner equivalent of the
 following if-else statement:

if(a.length > b.length){
return a;
} else {
return b;
}


//Complete the Function hasOne
Complete the function hasOne which takes in an array of numbers. Return true if any of the numbers in the array are 1. Return false if not.

console.log( hasOne([1,2,3]) ); // true
console.log( hasOne([1,1,1]) ); // true
console.log( hasOne([4,5,6]) ); // false
soln
function hasOne(array) {
    for(let i = 0; i < array.length; i++) {
        if(array[i] === 1) {
            return true;
        }
    }
    return false;
}

Reverse
Write a function reverse that takes a string as an argument and returns a string with all the letters reversed.

For example, reverse("cat") would return the string "tac".
function reverse(string) {
    let newArray = "";
    for(let i = string.length-1;i>=0;i--){
        newArray+=string[i];
    }
    return newArray;
    
}

module.exports = reverse;



Palindrome
Write a function isPalindrome that takes a word string and returns true if the word is a palindrome or false if it is not.

A palindrome is a word that is spelled the same forwards as it is backwards.


function isPalindrome(string) {
    return string === reverse(string);
}

function reverse(string) {
    let newStr = "";

    for (let i = string.length - 1; i >= 0; i--) {
        newStr += string[i]
    }

    return newStr;
}

module.exports = isPalindrome;
