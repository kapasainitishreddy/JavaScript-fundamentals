Arrays
In JavaScript, when we want to store a list of elements we use an Array.

An array starts with an open square bracket [ and ends with a closed square bracket ]. The elements inside the array are separated by a comma ,.

Here are some examples of arrays filled with primary types:

const numbers = [1, 2, 3, 4, 5];
const booleans = [true, false, true, true];
const strings = ["happy", "go", "lucky"];
We can also store arrays within arrays! Referred to as a nested array.

const nested = [[1, 2, [1, 2]], 2];
 In this example, the top-level nested array has two elements: an array [1, 2, [1, 2]]and the element 2.



//containing unique element
function unique(array) {
    let newArray = [];
    for(let i = 0; i < array.length; i++) {
        const element = array[i];
        if (newArray.indexOf(element) === -1)
        //his line of code checks if the current element from the input array is not present in the 
        newArray. The indexOf() method returns the first index at which a given element can be found 
        in an array, or -1 if it is not present. In this case, if the indexOf() method returns -1, it
         means
         the element is not present in newArray, and the element is pushed to newArray in the next line. {
            newArray.push(element);
        }
    }
    return newArray;
}

module.exports = unique;
This function takes an array as an input and returns a new array containing only the unique 
elements from the input array. It uses a for loop to iterate through the input array and checks 
if an element is already present in the new array using the indexOf() method. If the element is 
not present in the new array, it is pushed to the new array. The function then returns the new array. The function is being exported as a module using the "module.exports" statement, allowing it to be used in other files.







module.exports = splitAtX; 

//Add One to Each Element
function addOne(array) {
    for(let i=0;i<array.length;i++){
        array[i]++;
    }
    
}

module.exports = addOne;


// Remove the Occurrences
Given an array of integers and a number, num, find all the occurrences of the number and remove it from the array.

Modify the array directly and do not return anything from this function.

An example:

const array = [1, 2, 3, 1];
removeOccurrences(array, 1);
console.log( array ); // [2, 3]



//code

// given an array of integers
// find all occurrences of num and remove them
function removeOccurrences(array, num) {
    for(let i = array.length - 1; i >= 0; i--) {
        if (array[i] === num) {
            array.splice(i, 1);
            //This line of code removes the current element from the input array by calling the splice() method on the array. The splice method alters the contents of an array by removing or replacing existing elements and/or adding new elements.
It takes three arguments:

The index at which to start changing the array (in this case, "i" which is the current index of the for loop)
The number of elements to remove (in this case, only 1)
The elements to add (in this case, none)
This line would remove the current element from the input array but it is not in the given function. If this line is added, the function would remove the duplicate elements from the input array and not return a new array with unique elements.





        }
    }
}

module.exports = removeOccurrences;

