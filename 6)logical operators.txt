Default Operator
In the last stage we referred to || as the Logical OR operator.

This operator is also sometimes referred to as the default operator, due to its behavior with truthy and falsey values.

Take, for example:

console.log("" || "Something Else"); // Something Else
The empty string "" is a falsey value, so || will take the second value in this operation.

This can be pretty useful with variables! We can use this to create a default message if one is not defined:

const message = WELCOME_MESSAGE || "Hello there!";
 Here message is guaranteed a truthy value even if WELCOME_MESSAGE is empty.

And it's not just limited to empty strings either:

const age = user.age || 99;
 If user.age is undefined or 0 we will default to 99. For that matter user.age could be any falsey value and it would default to 99.
 

 //Guard Operator
We learned that || can be referred to as the Logical OR operator or the default operator.

Similarily, the && operator can be referred to as the Logical AND operator or the guard operator!

We can use the operator to guard against run-time exceptions (or errors) when dealing with falsey values. 

Let's see some examples:

const user = { name: 'bob' }
console.log(user && user.name); // bob

const user2 = undefined;
console.log(user2 && user2.name); // undefined
Notice how in the first example we successfully retrieve the user's name, while the second example returns undefined.

In the second example, if we tried to retrieve this property directly, we would hit a run-time exception:

const user2 = undefined;
console.log(user2.name);
Trying to log user2.name right here would result in an uncaught error: Uncaught TypeError: Cannot read property 'name' of undefined.