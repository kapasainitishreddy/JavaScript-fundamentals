Type Conversion
Type conversion describes when a value changes its type. For instance, when a string turns into a number or vice-versa.

There are some explicit ways to change a value's type. These are obvious, purposeful methods intended to change the type.

// explicit conversion
const a = (1).toString();
console.log(a); // 1
console.log(typeof a); // string
There are also plenty of implicit ways to change a value's type. Since JavaScript is a loose typing language, it does it's best to assume the behavior that the programmer might expect.

// implicit conversion
const b = "3" + "4";
console.log(b); // 34
console.log(typeof b); // number

Strings to Numbers
In JavaScript, there are several ways to convert a string into a number. First, there is explicit conversion:

const string = "2"
console.log(Number(string)); // 2

const string = "hello"
console.log(Number(string)); // NaN
 You can also convert strings to numbers with parseInt and parseFloat. Be aware these two methods will chop off non-numeric characters at the end of the string.

And there is implicit conversion:

const string = "2";
console.log(+string); // 2

const string2 = "hello";
console.log(+string2); // NaN
You can see with the + operator the string is implicitly converted to a number.

 Best practice is to use explicit conversion in most cases. Explicit conversion will make your intentions obvious to your fellow programmers when they review/maintain your code!
 Q)Given a string, convert it to a number.

If the string is not a number, return 0.
function toNumber(string) {
    return Number(string) || 0;
}

module.exports = toNumber;
There are several ways to convert to a string in JavaScript. There are explicit methods:

const a = 123;

console.log(a.toString()); // "123"
console.log(String(a)); // "123"

console.log(false.toString()); // "false"
And then there are implicit conversion:

console.log(123 + ""); // "123"
console.log(true + ""); // "true"
JavaScript does its best to interpret the intention here by coercing these values to strings.

It should be noted that if the string had a number in it, they would still be added together as strings:

console.log(2 + "2"); // "22"
 Notice that the result is 22 here, not 4! The expression 2 + 2 evaluates to 4. However, when one of the values is a string, both are first converted to a string and then merged together.
 Boolean Conversion
Just like number and string conversion, we can convert to boolean explicitly:

console.log(Boolean(2)); // true
console.log(Boolean("")); // false
 We can also use the logical NOT operator ! to convert boolean, flip the value, and ! again to flip it back. See Details.

When converting to booleans, values that are falsey are converted to false: false, 0, "", null, undefined, and NaN. All other values are converted to true.

Situations where values are implicitly converted to booleans include if conditionals:

if(3) {
    console.log('3 is truthy!');
}
This would hit the console.log because 3 is, in fact, truthy.
Loose Equals
In previous lessons we discussed strict equals ===. We know that this operator compares two values and returns whether or not they are the same.

For instance:

console.log(3 === 3); // true
console.log("apple" === "orange"); // false
When the values are different types, the === operator will always evaluate to false:

console.log("2" === 2); // false
However, the loose equals == comparison operator will attempt type conversion to compare values!
JSON
JavaScript Object Notation, or JSON, is a format for transferring JavaScript data.

Don't worry! It's much like object syntax that we're already used to, except in string form.

Let's see some JSON:

const person = '{"name":"Jim"}';
The value stored in person is a string! It looks quite a bit like an object. And, in fact, it can be quite easily turned into an object!

The advantage of JSON is we can use it to send data across a network.   

We can get the same JSON as above by using JSON.stringify on an existing object:

const person = JSON.stringify({ name: "Jim" });

console.log(person); // {"name":"Jim"}
Valid JSON
In the last stage, we focused on turning an object into JSON. We can also do the reverse, turning JSON back into an object.

Let's say that some other machine sent us JSON over a network:

const itemJSON = `{
    "type": "food",
    "edible": true,
    "quantity": 2
}`
 You'll notice that that the keys type, edible and quantity are all within double-quotes. This is required in JSON. Without it, this would not be valid JSON.

 We can parse the above JSON to turn it into an object:

const item = JSON.parse(itemJSON);

console.log(item.type); // food
console.log(item.edible); // true
Now we can use the . operator like with any other JavaScript object!
Destructuring, Rest & Spread
When learning JavaScript, you may often hear reference to ECMAScript, which is a language specification that JavaScript adheres to.

The last several years ECMAScript has been releasing new editions, adding features to the language specification. For example, in ES2015, support was added for arrow functions () => {}, the class operator and the import syntax, among many other features.

Web browsers quickly adopt these features and add them to new versions. However, these means older versions of the browser do not support these features. For this reason, transpilers such as babeljs exist. These transpilers will convert new language features into code that older browsers support. You can configure transpilers for specific browser support and features you'd like to use.

We're going to be talking about three convenience features added in the last few editions of ECMAScript: destructuring, rest, and spread.

 All of the features mentioned can be used inside of the JavaScript code tutorials on Alchemy University!

Destructuring 
With destructuring we can "unpack" an object and assign its properties to new variables. For example, let's look at object destructuring:

const obj = {
  a: 2,
  b: 3,
}

// destructure assignment
const { a, b } = obj;

console.log(a); // 2
console.log(b); // 3
 We are destructuring the obj here to assign the values of its properties a and b to variables with the corresponding names. The values are assigned to the variables with the same name as the property. If we tried to destructure with a variable named c, it would be undefined.

We can also destructure arrays:

const arr = ["hello", "world"];

const [a, b] = arr;

console.log(a); // hello
console.log(b); // world
 In this case, we are pulling the values out the array based on their position. The first element is stored in a and the second element is stored in b.

The same thing works for function arguments! Let's see it:

function addThree([a,b,c]) {
    return a + b + c;
}

const sum = addThree([1,2,3]);

console.log(sum); // 6
 Take a look at how we can destructure the function argument itself! Very cool 

 You can learn more about destructuring on MDN.

Rest Parameters 
The rest parameters syntax can assign function arguments as an array. For example:

function log(...args) {
    console.log(args);
}

log(1, 2, 3, 4, 5); // [1, 2, 3, 4, 5]
 Here we are passing five individual arguments to the log function, the rest syntax is ...args, which is assigning an array with all of the arguments to args.

You can also grab the rest of the parameters:

function log(a, b, ...args) {
    console.log(args);
}

log(1, 2, 3, 4, 5); // [3, 4, 5]
 Here a and b will be assigned the first two arguments while ...args will be assigned the remaining three arguments in an array.

This syntax can also be used in destructuring:

const [a, b, ...others] = [1, 2, 3, 4, 5];

console.log(others); // [3, 4, 5]
Can be quite useful! 

 You can learn more about the rest parameters syntax on MDN.

Spread Arguments 
This is sort of the opposite of the rest syntax. Instead of saying "grab me the rest of the values", we're saying "spread these values out".

Let's see what that means:

const numbers = [1, 2, 3];

function add(a, b, c) {
  return a + b + c;
}

const sum = add(...numbers);

console.log(sum); // 6
 Here the numbers are being spread out to the variables a, b and c.

 You can learn more about the spread syntax on MDN.

Wrap Up 
All of these features are for convenience. Instead of destructuring, we can of course, simply assign variables to the object's properties:

const x = obj.x;
Rather than destructuring it:

const { x } = obj;
Similarly with the rest and spread operators. They provide a convenient way to write our code. It does not mean that you need to write your code this way.
Q)fizzbuzz
function fizzBuzz(numbers) {
    let str = "";
    for(let i = 0; i < numbers.length; i++) {
        const number = numbers[i];
        if (number % 3 === 0) {
            str += "fizz";
        }  
        if (number % 5 === 0) {
            str += "buzz";
        } 
    }
    return str;
}

module.exports = fizzBuzz;